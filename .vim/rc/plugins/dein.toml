# a dark powered Vim/Neovim plugin manager
[[plugins]]
repo = 'Shougo/dein.vim'

# a great asynchronous execution library for Vim
[[plugins]]
repo = 'Shougo/vimproc'
build = 'make'

# search and display information from arbitrary sources
# like files, buffers, recently used files or registers
[[plugins]]
repo = 'Shougo/unite.vim'
hook_source = 'source ~/.vim/rc/plugins/unite.rc.vim'

# light and configurable statusline/tabline
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_source = 'source ~/.vim/rc/plugins/lightline.rc.vim'

# adds snippet support
[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets']
hook_add = '''
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  imap <C-s> <Plug>(neosnippet_start_unite_snippet)
  smap <C-s> <Plug>(neosnippet_start_unite_snippet)
'''

# The standard snippets repository for Shougo/neosnippet.vim
[[plugins]]
repo = 'Shougo/neosnippet-snippets'

# colorscheme for lightline.vim
[[plugins]]
repo = 'itchyny/landscape.vim'

# auto close parentheses
[[plugins]]
repo = 'cohama/lexima.vim'
hook_add = '''
  call lexima#add_rule({'char': '$', 'input_after': '$', 'filetype': 'latex'})
  call lexima#add_rule({'char': '$', 'at': '\%#\$', 'leave': 1, 'filetype': 'latex'})
  call lexima#add_rule({'char': '<BS>', 'at': '\$\%#\$', 'delete': 1, 'filetype': 'latex'})
'''

# provide flawless, smooth and fast motions with minimal keystrokes
[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_source = 'source ~/.vim/rc/plugins/easymotion.rc.vim'

# graphical substitute
[[plugins]]
repo = 'osyo-manga/vim-over'
hook_add = '''
  nnoremap [over] <Nop>
  nmap , [over]
  nnoremap [over]s :OverCommandLine<CR>%s/\v
  nnoremap [over]w :OverCommandLine<CR>%s/<C-r><C-w>//g<Left><Left>
'''

# create my own submodes
[[plugins]]
repo = 'kana/vim-submode'
hook_add = '''
  call submode#enter_with('winsize', 'n', '', '<C-w>>', '<C-w>>')
  call submode#enter_with('winsize', 'n', '', '<C-w><', '<C-w><')
  call submode#enter_with('winsize', 'n', '', '<C-w>+', '<C-w>-')
  call submode#enter_with('winsize', 'n', '', '<C-w>-', '<C-w>+')
  call submode#map('winsize', 'n', '', '>', '<C-w>>')
  call submode#map('winsize', 'n', '', '<', '<C-w><')
  call submode#map('winsize', 'n', '', '+', '<C-w>-')
  call submode#map('winsize', 'n', '', '-', '<C-w>+')
'''
