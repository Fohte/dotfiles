# a dark powered Vim/Neovim plugin manager
[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'w0ng/vim-hybrid'

# a great asynchronous execution library for Vim
[[plugins]]
repo = 'Shougo/vimproc'
build = 'make'

# search and display information from arbitrary sources
# like files, buffers, recently used files or registers
[[plugins]]
repo = 'Shougo/unite.vim'
hook_source = 'source ~/.vim/rc/plugins/configs/unite.rc.vim'
if = '!has("nvim")'

[[plugins]]
repo = 'Shougo/unite-outline'
on_source = 'unite.vim'

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_source = 'source ~/.vim/rc/plugins/configs/denite.rc.vim'
if = 'has("nvim")'

# light and configurable statusline/tabline
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_source = 'source ~/.vim/rc/plugins/configs/lightline.rc.vim'

# adds snippet support
[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_add = '''
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  let g:neosnippet#snippets_directory = '~/.vim/snippets'
  let g:neosnippet#disable_runtime_snippets = {
  \   '_' : 1,
  \ }
'''

# colorscheme for lightline.vim
[[plugins]]
repo = 'cocopon/lightline-hybrid.vim'

# auto close parentheses
[[plugins]]
repo = 'cohama/lexima.vim'
hook_source = '''
  let g:lexima_enable_basic_rules = 1
'''

# provide flawless, smooth and fast motions with minimal keystrokes
[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_source = 'source ~/.vim/rc/plugins/configs/easymotion.rc.vim'

# graphical substitute
[[plugins]]
repo = 'osyo-manga/vim-over'
hook_add = '''
  nnoremap [over] <Nop>
  nmap , [over]
  nnoremap [over]s :OverCommandLine<CR>%s/\v
  nnoremap [over]w :OverCommandLine<CR>%s/<C-r><C-w>//g<Left><Left>
'''

# improve git commit buffer
[[plugins]]
repo = 'rhysd/committia.vim'
on_ft = 'gitcommit'
hook_add = '''
  let g:committia_hooks = {}
  function! g:committia_hooks.edit_open(info)
    " If no commit message, start with insert mode
    if a:info.vcs ==# 'git' && getline(1) ==# ''
      startinsert
    end
  endfunction
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'w0rp/ale'
hook_source = '''
  let g:ale_lint_on_text_changed = 0
  let g:ale_lint_on_enter = 0
  let g:ale_lint_on_save = 1
  let g:ale_linters = {'go': ['gometalinter', 'gofmt']}
  let g:ale_fixers = {'javascript': ['prettier']}
  let g:ale_fix_on_save = 1
  let g:ale_javascript_prettier_use_local_config = 1
  let g:ale_go_gometalinter_options = '--disable-all --enable=vet --enable=gotype'
'''

[[plugins]]
repo = 'AndrewRadev/switch.vim'
hook_source = '''
  let g:switch_mapping = '_'

  let g:switch_custom_definitions =
  \ [
  \   { '\v^( *- *)\[x\](.*)$': '\1[ ]\2' },
  \   { '\v^( *- *)\[ \](.*)$': '\1[x]\2' },
  \ ]
'''

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'terryma/vim-multiple-cursors'

[[plugins]]
repo = 'nixprime/cpsm'
build = 'PY3=ON sh install.sh'

[[plugins]]
repo = 'thinca/vim-themis'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
  nnoremap <silent> <Leader>qr :<C-u>QuickRun<CR>
  nnoremap <silent> <Leader>ql :<C-u>QuickRun ruby.rspec.line<CR>
  nnoremap <expr> <silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"

  let g:quickrun_config = {
  \   '_': {
  \     'runner': 'vimproc',
  \     'runner/vimproc/updatetime': 100,
  \   },
  \   'ruby.rspec': {
  \     'command': 'rspec',
  \     'exec': '%c %s %o -fd --tty',
  \   },
  \   'ruby.rspec.line': {
  \     'command': 'rspec',
  \     'exec': '%c %s:%{line(".")} %o -fd --tty',
  \   },
  \ }
'''
